// automatically generated by the FlatBuffers compiler, do not modify

namespace slyther.flatbuffers
{

using System;
using FlatBuffers;

public sealed class ServerWorldState : Table {
  public static ServerWorldState GetRootAsServerWorldState(ByteBuffer _bb) { return GetRootAsServerWorldState(_bb, new ServerWorldState()); }
  public static ServerWorldState GetRootAsServerWorldState(ByteBuffer _bb, ServerWorldState obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public ServerWorldState __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public uint Tick { get { int o = __offset(4); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }
  public slyther.flatbuffers.NetworkObjectState GetObjectStates(int j) { return GetObjectStates(new slyther.flatbuffers.NetworkObjectState(), j); }
  public slyther.flatbuffers.NetworkObjectState GetObjectStates(slyther.flatbuffers.NetworkObjectState obj, int j) { int o = __offset(6); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int ObjectStatesLength { get { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; } }

  public static Offset<ServerWorldState> CreateServerWorldState(FlatBufferBuilder builder,
      uint tick = 0,
      VectorOffset objectStatesOffset = default(VectorOffset)) {
    builder.StartObject(2);
    ServerWorldState.AddObjectStates(builder, objectStatesOffset);
    ServerWorldState.AddTick(builder, tick);
    return ServerWorldState.EndServerWorldState(builder);
  }

  public static void StartServerWorldState(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddTick(FlatBufferBuilder builder, uint tick) { builder.AddUint(0, tick, 0); }
  public static void AddObjectStates(FlatBufferBuilder builder, VectorOffset objectStatesOffset) { builder.AddOffset(1, objectStatesOffset.Value, 0); }
  public static VectorOffset CreateObjectStatesVector(FlatBufferBuilder builder, Offset<slyther.flatbuffers.NetworkObjectState>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartObjectStatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<ServerWorldState> EndServerWorldState(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ServerWorldState>(o);
  }
};


}
