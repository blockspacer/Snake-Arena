// automatically generated by the FlatBuffers compiler, do not modify

namespace slyther.flatbuffers
{

using System;
using FlatBuffers;

public enum ClientMessageType : byte
{
 NONE = 0,
 ClientHello = 1,
 ClientInputState = 2,
 ClientGoodbye = 3,
 TickAck = 4,
};

public sealed class ClientMessage : Table {
  public static ClientMessage GetRootAsClientMessage(ByteBuffer _bb) { return GetRootAsClientMessage(_bb, new ClientMessage()); }
  public static ClientMessage GetRootAsClientMessage(ByteBuffer _bb, ClientMessage obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public ClientMessage __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public byte ClientId { get { int o = __offset(4); return o != 0 ? bb.Get(o + bb_pos) : (byte)0; } }
  public ClientMessageType MsgType { get { int o = __offset(6); return o != 0 ? (ClientMessageType)bb.Get(o + bb_pos) : ClientMessageType.NONE; } }
  public TTable GetMsg<TTable>(TTable obj) where TTable : Table { int o = __offset(8); return o != 0 ? __union(obj, o) : null; }

  public static Offset<ClientMessage> CreateClientMessage(FlatBufferBuilder builder,
      byte clientId = 0,
      ClientMessageType msg_type = ClientMessageType.NONE,
      int msgOffset = 0) {
    builder.StartObject(3);
    ClientMessage.AddMsg(builder, msgOffset);
    ClientMessage.AddMsgType(builder, msg_type);
    ClientMessage.AddClientId(builder, clientId);
    return ClientMessage.EndClientMessage(builder);
  }

  public static void StartClientMessage(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddClientId(FlatBufferBuilder builder, byte clientId) { builder.AddByte(0, clientId, 0); }
  public static void AddMsgType(FlatBufferBuilder builder, ClientMessageType msgType) { builder.AddByte(1, (byte)msgType, 0); }
  public static void AddMsg(FlatBufferBuilder builder, int msgOffset) { builder.AddOffset(2, msgOffset, 0); }
  public static Offset<ClientMessage> EndClientMessage(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ClientMessage>(o);
  }
  public static void FinishClientMessageBuffer(FlatBufferBuilder builder, Offset<ClientMessage> offset) { builder.Finish(offset.Value); }
};

public sealed class ClientHello : Table {
  public static ClientHello GetRootAsClientHello(ByteBuffer _bb) { return GetRootAsClientHello(_bb, new ClientHello()); }
  public static ClientHello GetRootAsClientHello(ByteBuffer _bb, ClientHello obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public ClientHello __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public string PlayerName { get { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetPlayerNameBytes() { return __vector_as_arraysegment(4); }

  public static Offset<ClientHello> CreateClientHello(FlatBufferBuilder builder,
      StringOffset playerNameOffset = default(StringOffset)) {
    builder.StartObject(1);
    ClientHello.AddPlayerName(builder, playerNameOffset);
    return ClientHello.EndClientHello(builder);
  }

  public static void StartClientHello(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddPlayerName(FlatBufferBuilder builder, StringOffset playerNameOffset) { builder.AddOffset(0, playerNameOffset.Value, 0); }
  public static Offset<ClientHello> EndClientHello(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ClientHello>(o);
  }
};

public sealed class ClientInputState : Table {
  public static ClientInputState GetRootAsClientInputState(ByteBuffer _bb) { return GetRootAsClientInputState(_bb, new ClientInputState()); }
  public static ClientInputState GetRootAsClientInputState(ByteBuffer _bb, ClientInputState obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public ClientInputState __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public uint Tick { get { int o = __offset(4); return o != 0 ? bb.GetUint(o + bb_pos) : (uint)0; } }
  public slyther.flatbuffers.Vec2 DesiredMove { get { return GetDesiredMove(new slyther.flatbuffers.Vec2()); } }
  public slyther.flatbuffers.Vec2 GetDesiredMove(slyther.flatbuffers.Vec2 obj) { int o = __offset(6); return o != 0 ? obj.__init(o + bb_pos, bb) : null; }
  public bool IsTurbo { get { int o = __offset(8); return o != 0 ? 0!=bb.Get(o + bb_pos) : (bool)false; } }

  public static void StartClientInputState(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddTick(FlatBufferBuilder builder, uint tick) { builder.AddUint(0, tick, 0); }
  public static void AddDesiredMove(FlatBufferBuilder builder, Offset<slyther.flatbuffers.Vec2> desiredMoveOffset) { builder.AddStruct(1, desiredMoveOffset.Value, 0); }
  public static void AddIsTurbo(FlatBufferBuilder builder, bool isTurbo) { builder.AddBool(2, isTurbo, false); }
  public static Offset<ClientInputState> EndClientInputState(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ClientInputState>(o);
  }
};

public sealed class ClientGoodbye : Table {
  public static ClientGoodbye GetRootAsClientGoodbye(ByteBuffer _bb) { return GetRootAsClientGoodbye(_bb, new ClientGoodbye()); }
  public static ClientGoodbye GetRootAsClientGoodbye(ByteBuffer _bb, ClientGoodbye obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public ClientGoodbye __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }


  public static void StartClientGoodbye(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<ClientGoodbye> EndClientGoodbye(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ClientGoodbye>(o);
  }
};


}
